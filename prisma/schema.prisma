generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("MY_SQL_DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map("compound_id")
  userId             Int       @map("user_id")
  providerType       String    @map("provider_type")
  providerId         String    @map("provider_id")
  providerAccountId  String    @map("provider_account_id")
  refreshToken       String?   @map("refresh_token")
  accessToken        String?   @map("access_token")
  accessTokenExpires DateTime? @map("access_token_expires")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @default(now()) @map("updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}

model User {
  id                    Int           @id @default(autoincrement())
  name                  String?
  email                 String?       @unique
  emailVerified         DateTime?     @map("email_verified")
  image                 String?
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @default(now()) @map("updated_at")
  codeReviewReviews     CodeReview[]  @relation("code_reviews_reviewer_idTousers")
  codeReviewSubmissions CodeReview[]  @relation("code_reviews_user_idTousers")
  projects              UserProject[] @relation("user_projectsTousers")

  @@map("users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map("verification_requests")
}

model UserProject {
  id           Int       @id @default(autoincrement())
  user_id      Int
  projectSlug  String    @map("project_slug") @db.VarChar(50)
  isPurchases  Boolean?  @map("is_purchased")
  isFollowing  Boolean?  @map("isFollowing")
  purchaseDate DateTime? @map("purchase_date") @db.DateTime(0)
  followDate   DateTime? @map("follow_date") @db.DateTime(0)
  user         User      @relation("user_projectsTousers", fields: [user_id], references: [id])

  @@index([user_id], name: "user")
  @@map("user_projects")
}

model CodeReview {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  reviewerId     Int?     @map("reviewer_id")
  submittedAt    DateTime @map("submitted_at") @db.DateTime(0)
  projectSlug    String   @map("project_slug") @db.VarChar(50)
  phase          String   @db.VarChar(255)
  pullRequestUrl String   @map("pull_request_url") @db.VarChar(255)
  status         Int
  reviewer       User?    @relation("code_reviews_reviewer_idTousers", fields: [reviewerId], references: [id])
  user           User     @relation("code_reviews_user_idTousers", fields: [userId], references: [id])

  @@index([reviewerId], name: "reviewer")
  @@index([userId], name: "user_code_review")
  @@map("code_reviews")
}
